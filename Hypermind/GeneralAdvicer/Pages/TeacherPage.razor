@page "/teacher"
@page "/"
@using HypermindLib
@using System.Text;
@inject IJSRuntime JsRuntime

<PageTitle>General Advicer</PageTitle>

<p align="center">
    <b>
        <font size="6">G</font><font size="4">ENERAL </font><font size="6">T</font><font size="4">EATCHER </font>
    </b>
</p>

@foreach (var message in advicer.messages)
{
    <p>@message.sender: @((MarkupString)message.text)</p>
}
<br />

<p>@Status</p>

@if (WaitingForTeacher)
{
    <p>
    <img src="/wait.gif" /> Teacher is thinking <img src="/wait.gif" />
    </p>
    
    
}
else
{
    <p>It is your turn :)</p>
}
<br />

@foreach (var FollowUp in FollowUps)
{
    <div style="display: flex; width: 100%;">
        <button style="flex: 90%;" @onclick="() => GetAdvice(FollowUp)">@FollowUp</button>
        <button style="flex: 10%;" @onclick="() => Speak(FollowUp)">&#x1F9BB;</button>
    </div>
}

<form @onsubmit="()=>GetAdvice(nextMessage)">
    <InputText placeholder="Enter your question here..." @bind-Value="nextMessage"></InputText>
    <button class="btn btn-primary">Send</button>
</form>


@code {

    private Teacher advicer = new Teacher();



    private bool WaitingForTeacher = false;

    private string nextMessage = "";

    public string lastPromp = "not yet set";

    public string[] FollowUps = new string[0];


    public string Status="Status: All Good";

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await createAnswer();
            base.OnAfterRender(firstRender);
        }
    }

    private async Task createAnswer()
    {
        await Task.Run(() =>
        {
            this.WaitingForTeacher = true;
            this.InvokeAsync(() => this.StateHasChanged());
            try
            {
                var answer = advicer.GetRespons();
                FollowUps = answer.FollowUpQuestions;
                Speak(answer.AnswerToRead);
                Status = "";
            }
            catch
            {
                Status = "Teacher did not respond, please try again. Sorry";
            }
            WaitingForTeacher = false;
            this.InvokeAsync(() => this.StateHasChanged());
        });
    }

    private async void GetAdvice(string param)
    {
        this.advicer.AddMessage(advicer.UserName, param);

        nextMessage = "";

        //let chatgpt create new message
        await createAnswer();

    }

    private void Speak(string text)
    {
        //if (BBB.UseVoiceSystem == false)
        //    return;
        JsRuntime.InvokeAsync<object>("speak", text);
    }
}